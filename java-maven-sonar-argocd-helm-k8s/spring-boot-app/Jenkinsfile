pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment {
        APP_NAME = "java-app"
        DOCKER_USER = "vigneshrepo23"
        DOCKER_IMAGE = "${DOCKER_USER} + ${java-app}"
        DOCKER_TAG = + "${DOCKER_IMAGE} + ${BUILD_NUMBER}"
        DOCKER_TOKEN = "docker-token"
    }
    stages {
        stage ("git checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/vigneshrepo23/ultimate-cicd-java'
            }
        }
        stage ("build") {
            steps{
                sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package"
            }
        }
        stage ("sonar") {
            steps {
                withSonarQubeEnv('sonarqube') {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package sonar:sonar'
               }
            }
        }
        stage ("gates") {
            steps {
                 timeout(time: 1, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
               }
            }
        }
        stage ("build & push image") {
            steps {
                sh '''
                  docker.withRegistry('',DOCKER_TOKEN) {
                    docker.image = docker.build "${DOCKER_IMAGE}"
                  }
                  docker.withRegistry('',DOCKER_TOKEN) {
                    docker_image.push("${DOCKER_TAG}")
                '''
            }
        }
    }
}